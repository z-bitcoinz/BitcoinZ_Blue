name: Build and Sign BitcoinZ Blue

on:
  push:
    tags:
      - 'v*'
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
          
      - name: Install dependencies
        run: yarn install
        
      - name: Build native module
        run: |
          cd native
          cargo build --release
          cp target/release/libbitcoinz_wallet_lite.dylib ../src/native.node
          
      - name: Build app
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider"
          yarn build
          
      - name: Create self-signed certificate
        run: |
          # Create a self-signed certificate for code signing
          security create-keypair \
            -a rsa \
            -s 2048 \
            -f "BitcoinZ Blue Certificate" \
            -T /usr/bin/codesign \
            -T /usr/bin/security
            
      - name: Build and sign macOS apps
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider"
          yarn electron-builder -m --dir -c.extraMetadata.main=build/electron.js --publish never
          
          # Ad-hoc sign the apps (removes some Gatekeeper restrictions)
          codesign --force --deep --sign - "dist/mac-arm64/BitcoinZ Blue.app"
          codesign --force --deep --sign - "dist/mac/BitcoinZ Blue.app"
          
      - name: Create ZIP files
        run: |
          cd dist
          ditto -c -k --keepParent "mac-arm64/BitcoinZ Blue.app" "BitcoinZ Blue-1.0.0-arm64-mac.zip"
          ditto -c -k --keepParent "mac/BitcoinZ Blue.app" "BitcoinZ Blue-1.0.0-x64-mac.zip"
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            dist/BitcoinZ Blue-1.0.0-arm64-mac.zip
            dist/BitcoinZ Blue-1.0.0-x64-mac.zip

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Build Windows app
        run: |
          $env:NODE_OPTIONS="--openssl-legacy-provider"
          yarn install
          yarn build
          yarn electron-builder -w -c.extraMetadata.main=build/electron.js --publish never

      - name: Sign Windows executables (self-signed)
        run: |
          # Create self-signed certificate for Windows
          $cert = New-SelfSignedCertificate -Subject "CN=BitcoinZ Blue" -Type CodeSigning -KeyUsage DigitalSignature -FriendlyName "BitcoinZ Blue Code Signing" -CertStoreLocation Cert:\CurrentUser\My -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")

          # Sign the executable
          $certPath = "Cert:\CurrentUser\My\$($cert.Thumbprint)"
          Set-AuthenticodeSignature -FilePath "dist\BitcoinZ Blue Setup 1.0.0.exe" -Certificate (Get-Item $certPath) -TimestampServer "http://timestamp.digicert.com"

          # Verify signature
          Get-AuthenticodeSignature "dist\BitcoinZ Blue Setup 1.0.0.exe"
        shell: powershell

      - name: Create Windows security report
        run: |
          echo "# Windows Security Report" > windows-security.md
          echo "" >> windows-security.md
          echo "## Code Signing Status" >> windows-security.md
          echo "- ✅ Executable is digitally signed" >> windows-security.md
          echo "- ✅ Self-signed certificate for integrity verification" >> windows-security.md
          echo "- ✅ Timestamp server used for long-term validity" >> windows-security.md
          echo "" >> windows-security.md
          echo "## Windows Defender SmartScreen" >> windows-security.md
          echo "- First-time downloads may show SmartScreen warning" >> windows-security.md
          echo "- Click 'More info' → 'Run anyway' to proceed" >> windows-security.md
          echo "- This is normal for new software publishers" >> windows-security.md
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            dist/BitcoinZ Blue Setup 1.0.0.exe
            dist/BitcoinZ Blue-1.0.0-win.zip
            windows-security.md

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
          
      - name: Build Linux app
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider"
          yarn install
          yarn build
          yarn electron-builder -l -c.extraMetadata.main=build/electron.js --publish never
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist/BitcoinZ Blue-1.0.0.AppImage
            dist/bitcoinz-wallet-lite_1.0.0_amd64.deb

  create-release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            macos-builds/*
            windows-builds/*
            linux-builds/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
