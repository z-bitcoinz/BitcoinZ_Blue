name: Build and Sign BitcoinZ Blue

on:
  push:
    tags:
      - 'v*'
    branches:
      - master
      - main
  workflow_dispatch:
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  build-macos:
    runs-on: macos-latest
    env:
      RUSTFLAGS: "-A warnings"
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          # cache: 'yarn'  # Disabled to ensure fresh build with parameter fixes
          
      - name: Setup Rust 1.81
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.81
          override: true

      - name: Verify Rust version
        run: |
          which rustc
          which cargo
          rustc --version
          cargo --version
          echo "âœ… Rust 1.81 confirmed"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '17'
          # cache: 'yarn'  # Disabled to ensure fresh build with parameter fixes

      - name: Clean build artifacts
        run: |
          rm -rf node_modules
          rm -rf native/target
          rm -rf dist

      - name: Install dependencies
        run: yarn install

      - name: Build native module
        run: |
          # Verify we're using the right Rust version
          echo "Using Rust version:"
          rustc --version

          cd native

          # Handle Cargo.lock version issues
          if [ -f "Cargo.lock" ]; then
            echo "ðŸ”§ Removing existing Cargo.lock to avoid version conflicts"
            rm Cargo.lock
          fi

          # Generate new lock file and build (allow warnings)
          cargo generate-lockfile
          cargo build --release
          cp target/release/libbitcoinz_wallet_lite.dylib ../src/native.node
          
      - name: Build macOS app
        run: |
          echo "Starting macOS build..."
          yarn --version
          node --version
          yarn dist:mac

      - name: Sign macOS apps (ad-hoc)
        run: |
          # Ad-hoc sign the apps (removes some Gatekeeper restrictions)
          if [ -d "dist/mac-arm64/BitcoinZ Blue.app" ]; then
            echo "âœ… Signing ARM64 app"
            codesign --force --deep --sign - "dist/mac-arm64/BitcoinZ Blue.app"
          fi

          if [ -d "dist/mac/BitcoinZ Blue.app" ]; then
            echo "âœ… Signing Intel app"
            codesign --force --deep --sign - "dist/mac/BitcoinZ Blue.app"
          fi


      - name: Upload macOS ARM64 (Apple Silicon)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-macOS-AppleSilicon
          path: |
            dist/*arm64-mac.zip

      - name: Upload macOS Intel
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-macOS-Intel
          path: |
            dist/*mac.zip


  build-windows:
    runs-on: windows-latest
    env:
      RUSTFLAGS: "-A warnings"
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust 1.81
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.81
          override: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          # cache: 'yarn'  # Disabled to ensure fresh build with parameter fixes

      - name: Clean build artifacts
        run: |
          if (Test-Path "node_modules") { Remove-Item -Recurse -Force "node_modules" }
          if (Test-Path "native/target") { Remove-Item -Recurse -Force "native/target" }
          if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        shell: powershell

      - name: Build Windows app
        run: |
          echo "Starting Windows build..."
          yarn --version
          node --version
          yarn install
          yarn dist:win

      - name: Upload Windows Installer (EXE)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-Windows-Installer
          path: |
            dist/*.exe

      - name: Upload Windows Portable (ZIP)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-Windows-Portable
          path: |
            dist/*.zip

      - name: Sign Windows executables (self-signed)
        run: |
          # Create self-signed certificate for Windows
          $cert = New-SelfSignedCertificate -Subject "CN=BitcoinZ Blue" -Type CodeSigning -KeyUsage DigitalSignature -FriendlyName "BitcoinZ Blue Code Signing" -CertStoreLocation Cert:\CurrentUser\My -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")

          # Sign the executable
          $certPath = "Cert:\CurrentUser\My\$($cert.Thumbprint)"
          Set-AuthenticodeSignature -FilePath "dist\BitcoinZ Blue Setup 1.0.0.exe" -Certificate (Get-Item $certPath) -TimestampServer "http://timestamp.digicert.com"

          # Verify signature
          Get-AuthenticodeSignature "dist\BitcoinZ Blue Setup 1.0.0.exe"
        shell: powershell

      - name: Create Windows security report
        run: |
          echo "# Windows Security Report" > windows-security.md
          echo "" >> windows-security.md
          echo "## Code Signing Status" >> windows-security.md
          echo "- âœ… Executable is digitally signed" >> windows-security.md
          echo "- âœ… Self-signed certificate for integrity verification" >> windows-security.md
          echo "- âœ… Timestamp server used for long-term validity" >> windows-security.md
          echo "" >> windows-security.md
          echo "## Windows Defender SmartScreen" >> windows-security.md
          echo "- First-time downloads may show SmartScreen warning" >> windows-security.md
          echo "- Click 'More info' â†’ 'Run anyway' to proceed" >> windows-security.md
          echo "- This is normal for new software publishers" >> windows-security.md
        shell: bash



  build-linux:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-A warnings"
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust 1.81
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.81
          override: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          # cache: 'yarn'  # Disabled to ensure fresh build with parameter fixes
          
      - name: Clean build artifacts
        run: |
          rm -rf node_modules
          rm -rf native/target
          rm -rf dist

      - name: Build Linux app
        run: |
          echo "Starting Linux build..."
          yarn --version
          node --version
          yarn install
          yarn dist:linux

      - name: Upload Linux AppImage (Universal)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-Linux-AppImage
          path: |
            dist/*.AppImage

      - name: Upload Linux DEB Package
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-Linux-DEB
          path: |
            dist/*.deb
          



