name: Build and Sign BitcoinZ Blue

on:
  push:
    tags:
      - 'v*'
    branches:
      - master
      - main
  workflow_dispatch:
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  build-macos:
    runs-on: macos-latest
    env:
      RUSTFLAGS: "-A warnings"
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          # cache: 'yarn'  # Disabled to ensure fresh build with parameter fixes
          
      - name: Setup Rust 1.81
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.81
          override: true

      - name: Verify Rust version
        run: |
          which rustc
          which cargo
          rustc --version
          cargo --version
          echo "‚úÖ Rust 1.81 confirmed"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '17'
          # cache: 'yarn'  # Disabled to ensure fresh build with parameter fixes

      - name: Clean build artifacts
        run: |
          rm -rf node_modules
          rm -rf native/target
          rm -rf dist

      - name: Setup Python for DMG creation
        run: |
          # Install Python 3 if not available
          if ! command -v python3 &> /dev/null; then
            echo "Installing Python 3..."
            brew install python@3
          fi
          
          # Create symlink for electron-builder DMG creation
          echo "Python 3 location: $(which python3)"
          # Use /usr/local/bin/python instead of /usr/bin/python as it's writable
          if [ ! -f /usr/local/bin/python ]; then
            ln -s $(which python3) /usr/local/bin/python
          fi
          
          # Verify Python is available
          /usr/local/bin/python --version
          
      - name: Install dependencies
        run: yarn install

      - name: Build native module
        run: |
          # Verify we're using the right Rust version
          echo "Using Rust version:"
          rustc --version

          cd native

          # Handle Cargo.lock version issues
          if [ -f "Cargo.lock" ]; then
            echo "üîß Removing existing Cargo.lock to avoid version conflicts"
            rm Cargo.lock
          fi

          # Generate new lock file and build (allow warnings)
          cargo generate-lockfile
          cargo build --release
          cp target/release/libbitcoinz_wallet_lite.dylib ../src/native.node
          
      - name: Build macOS app with ad-hoc signing
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # Force electron-builder to use ad-hoc signing
          CSC_LINK: ""
          CSC_KEY_PASSWORD: ""
          CODESIGN_IDENTITY: "-"  # This tells electron-builder to use ad-hoc signing
          # Skip rebuilding native deps since we already built them
          ELECTRON_BUILDER_SKIP_REBUILD: true
        timeout-minutes: 30  # Add timeout to prevent hanging
        run: |
          echo "Starting macOS build with ad-hoc signing..."
          yarn --version
          node --version
          
          # First build without packaging
          yarn build
          
          # Copy native module to the right place for electron-builder
          cp src/native.node build/
          
          # Copy electron.js to build directory
          cp public/electron.js build/
          
          # Now use electron-builder with ad-hoc signing, skip rebuild
          echo "üîê Building and signing macOS app..."
          # Build apps without DMG (to avoid Python issue)
          npx electron-builder -m \
            --config.extraMetadata.main=build/electron.js \
            --config.mac.identity=null \
            --config.mac.type=distribution \
            --config.mac.target=dir \
            --config.npmRebuild=false \
            --config.buildDependenciesFromSource=false \
            --publish never
          
          # Verify the apps are signed BEFORE zipping
          echo "üìã Verifying signatures..."
          find dist -name "*.app" -type d | while read -r app; do
            echo "Checking: $app"
            if codesign -dv "$app" 2>&1 | grep -q "adhoc"; then
              echo "‚úÖ Ad-hoc signature found: $app"
            else
              echo "‚ö†Ô∏è  No ad-hoc signature found, applying now..."
              codesign --force --deep --sign - "$app"
              echo "‚úÖ Ad-hoc signature applied: $app"
            fi
            
            # Remove extended attributes
            xattr -cr "$app"
          done
          
          echo "‚úÖ macOS build and signing complete"
          
      - name: Create DMG files using custom script
        run: |
          echo "üì¶ Creating DMG files..."
          # Make the script executable
          chmod +x scripts/create-dmg.sh
          
          # Run the custom DMG creation script
          ./scripts/create-dmg.sh
          
          echo "‚úÖ DMG creation complete"
          
          # List created DMG files
          ls -la dist/*.dmg || true


      - name: Upload macOS ARM64 (Apple Silicon)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-macOS-AppleSilicon
          path: |
            dist/*arm64.dmg

      - name: Upload macOS Intel
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-macOS-Intel
          path: |
            dist/*x64.dmg


  build-windows:
    runs-on: windows-latest
    env:
      RUSTFLAGS: "-A warnings"
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust 1.81
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.81
          override: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          # cache: 'yarn'  # Disabled to ensure fresh build with parameter fixes

      - name: Clean build artifacts
        run: |
          if (Test-Path "node_modules") { Remove-Item -Recurse -Force "node_modules" }
          if (Test-Path "native/target") { Remove-Item -Recurse -Force "native/target" }
          if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        shell: powershell

      - name: Build native module for Windows
        run: |
          echo "Building native Rust module for Windows..."
          cd native
          
          # Remove old lock file if exists
          if (Test-Path "Cargo.lock") { 
            Remove-Item "Cargo.lock" 
            echo "Removed existing Cargo.lock"
          }
          
          # Verify Rust toolchain
          echo "Rust toolchain info:"
          rustc --version
          cargo --version
          
          # Clean any previous builds
          if (Test-Path "target") {
            Remove-Item -Recurse -Force "target"
            echo "Cleaned previous build artifacts"
          }
          
          # Build the native module with verbose output
          echo "Building native module..."
          cargo build --release --verbose
          
          # Check what was built - be more thorough
          echo "Checking build output:"
          if (Test-Path "target/release") {
            echo "Contents of target/release:"
            Get-ChildItem target/release -Force | Format-Table Name, Length, LastWriteTime
            
            # Look for all possible DLL names
            $allDlls = Get-ChildItem target/release/*.dll -ErrorAction SilentlyContinue
            if ($allDlls) {
              echo "Found DLL files:"
              $allDlls | ForEach-Object { echo "  - $($_.Name) ($($_.Length) bytes)" }
            }
            
            # Look for the specific DLL we need
            $targetDll = $null
            
            # Try different possible names
            $possibleNames = @(
              "*bitcoinz_wallet_lite*.dll",
              "*bitcoinz*.dll", 
              "*zecwallet*.dll",
              "*.dll"
            )
            
            foreach ($pattern in $possibleNames) {
              $found = Get-ChildItem "target/release/$pattern" -ErrorAction SilentlyContinue | Where-Object { $_.Name -notlike "*deps*" } | Select-Object -First 1
              if ($found) {
                $targetDll = $found
                echo "SUCCESS: Found target DLL with pattern '$pattern': $($found.Name)"
                break
              }
            }
            
            if ($targetDll) {
              # Verify it's a Windows DLL
              $fileInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($targetDll.FullName)
              echo "DLL Info: $($fileInfo.FileDescription)"
              
              # Copy to the correct location
              Copy-Item $targetDll.FullName ../src/native.node
              echo "SUCCESS: Copied $($targetDll.Name) to src/native.node"
              
              # Verify the copied file
              if (Test-Path "../src/native.node") {
                $copiedSize = (Get-Item "../src/native.node").Length
                echo "SUCCESS: Verified native.node exists ($copiedSize bytes)"
              } else {
                throw "ERROR: Failed to copy DLL to src/native.node"
              }
            } else {
              echo "ERROR: Could not find any suitable DLL files"
              echo "Available files in target/release:"
              Get-ChildItem target/release | Format-Table Name, Length
              throw "No native module DLL found"
            }
          } else {
            throw "ERROR: target/release directory not found - build may have failed"
          }
        shell: powershell

      - name: Build Windows app
        run: |
          echo "Starting Windows application build..."
          npm --version
          node --version
          
          # Verify native module was built correctly
          if (Test-Path "src/native.node") {
            $nativeSize = (Get-Item "src/native.node").Length
            echo "SUCCESS: Native module found: $nativeSize bytes"
            
            # Try to get file type info
            try {
              $fileInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo("src/native.node")
              echo "Native module info: $($fileInfo.FileDescription)"
            } catch {
              echo "Native module: Windows binary (file info unavailable)"
            }
          } else {
            throw "ERROR: Native module not found at src/native.node"
          }
          
          # Remove yarn.lock to use npm
          if (Test-Path "yarn.lock") {
            Remove-Item "yarn.lock"
            echo "Removed yarn.lock to use npm instead"
          }
          
          # Configure npm for better reliability
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set loglevel warn  # Reduced verbosity
          
          # Clean npm cache
          npm cache clean --force
          
          # Install dependencies using npm (more stable on Windows)
          echo "Installing dependencies with npm..."
          npm install --no-audit --no-fund
          
          # Install cross-env globally if missing
          npm install -g cross-env
          
          # Build the app (skip native build as we already did it)
          echo "Building application..."
          $env:SKIP_NATIVE_BUILD = "true"
          npm run build
          
          # Create build directory if it doesn't exist
          if (!(Test-Path "build")) {
            New-Item -ItemType Directory -Path "build"
          }
          
          # Copy native module to build directory and verify
          Copy-Item src/native.node build/
          if (Test-Path "build/native.node") {
            $buildNativeSize = (Get-Item "build/native.node").Length
            echo "SUCCESS: Native module copied to build: $buildNativeSize bytes"
          } else {
            throw "ERROR: Failed to copy native module to build directory"
          }
          
          # Copy electron.js to build directory
          Copy-Item public/electron.js build/
          echo "SUCCESS: Copied electron.js to build directory"
          
          # Build with electron-builder
          echo "Building Windows installer and portable app..."
          npx electron-builder -w --config.extraMetadata.main=build/electron.js --publish never
          
          # Verify the build artifacts
          echo "Build verification:"
          if (Test-Path "dist") {
            $exeFiles = Get-ChildItem dist/*.exe -ErrorAction SilentlyContinue
            $zipFiles = Get-ChildItem dist/*.zip -ErrorAction SilentlyContinue
            
            if ($exeFiles) {
              echo "SUCCESS: Windows installer created:"
              $exeFiles | ForEach-Object { echo "  $($_.Name) ($([math]::Round($_.Length/1MB, 2)) MB)" }
            }
            
            if ($zipFiles) {
              echo "SUCCESS: Windows portable created:"
              $zipFiles | ForEach-Object { echo "  $($_.Name) ($([math]::Round($_.Length/1MB, 2)) MB)" }
            }
            
            # Check if native module is in the final package
            $winUnpacked = "dist/win-unpacked"
            if (Test-Path $winUnpacked) {
              $nativeInPackage = Get-ChildItem "$winUnpacked/resources/app.asar.unpacked/build/*.node" -ErrorAction SilentlyContinue
              if ($nativeInPackage) {
                echo "SUCCESS: Native module found in packaged app:"
                $nativeInPackage | ForEach-Object { echo "  $($_.Name) ($($_.Length) bytes)" }
              } else {
                echo "WARNING: Native module not found in packaged app"
              }
            }
          } else {
            throw "ERROR: dist directory not created - electron-builder may have failed"
          }
        shell: powershell

      - name: Analyze Windows DLL dependencies
        run: |
          echo "Analyzing Windows DLL dependencies..."
          
          # Find the native module in the build
          $nativeModule = Get-ChildItem "src/native.node" -ErrorAction SilentlyContinue
          if ($nativeModule) {
            echo "Analyzing dependencies for: $($nativeModule.FullName)"
            
            # Use dumpbin to analyze dependencies (if available)
            try {
              # Try to find dumpbin in Visual Studio paths
              $dumpbinPaths = @(
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
              )
              
              $dumpbin = $null
              foreach ($path in $dumpbinPaths) {
                $found = Get-ChildItem $path -ErrorAction SilentlyContinue | Select-Object -First 1
                if ($found) {
                  $dumpbin = $found.FullName
                  echo "Found dumpbin at: $dumpbin"
                  break
                }
              }
              
              if ($dumpbin) {
                echo "DLL Dependencies:"
                & $dumpbin /dependents $nativeModule.FullName
                echo ""
                echo "DLL Exports:"
                & $dumpbin /exports $nativeModule.FullName
              } else {
                echo "WARNING: dumpbin not found, cannot analyze dependencies"
              }
            } catch {
              echo "WARNING: Could not run dependency analysis: $($_.Exception.Message)"
            }
            
            # Check file architecture
            echo "Checking file architecture..."
            try {
              $fileType = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($nativeModule.FullName)
              echo "File version info: $($fileType.FileDescription)"
            } catch {
              echo "Could not get file version info"
            }
          } else {
            echo "ERROR: Native module not found for dependency analysis"
          }
        shell: powershell

      - name: Install Visual C++ Redistributables
        run: |
          echo "Installing Visual C++ Redistributables..."
          
          # Download and install Visual C++ Redistributable for Visual Studio 2019 (x64)
          $vcRedistUrl = "https://aka.ms/vs/16/release/vc_redist.x64.exe"
          $vcRedistPath = "$env:TEMP\vc_redist.x64.exe"
          
          echo "Downloading VC++ Redistributable from: $vcRedistUrl"
          Invoke-WebRequest -Uri $vcRedistUrl -OutFile $vcRedistPath
          
          echo "Installing VC++ Redistributable..."
          Start-Process -FilePath $vcRedistPath -ArgumentList "/install", "/quiet", "/norestart" -Wait
          
          echo "VC++ Redistributable installation completed"
          
          # Also install 2022 version if available
          try {
            $vcRedist2022Url = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
            $vcRedist2022Path = "$env:TEMP\vc_redist_2022.x64.exe"
            
            echo "Downloading VC++ 2022 Redistributable..."
            Invoke-WebRequest -Uri $vcRedist2022Url -OutFile $vcRedist2022Path
            
            echo "Installing VC++ 2022 Redistributable..."
            Start-Process -FilePath $vcRedist2022Path -ArgumentList "/install", "/quiet", "/norestart" -Wait
            
            echo "VC++ 2022 Redistributable installation completed"
          } catch {
            echo "Note: VC++ 2022 Redistributable installation failed, but this may not be critical"
          }
        shell: powershell

      - name: Validate Windows native module
        run: |
          echo "Validating Windows native module..."
          
          # Check native module in different locations
          $locations = @(
            "src/native.node",
            "build/native.node", 
            "dist/win-unpacked/resources/app.asar.unpacked/build/native-*.node"
          )
          
          foreach ($location in $locations) {
            $files = Get-ChildItem $location -ErrorAction SilentlyContinue
            if ($files) {
              foreach ($file in $files) {
                echo "Checking: $($file.FullName)"
                echo "   Size: $($file.Length) bytes"
                echo "   Modified: $($file.LastWriteTime)"
                
                # Try to get more info about the file
                try {
                  $fileType = [System.IO.Path]::GetExtension($file.Name)
                  echo "   Extension: $fileType"
                  
                  # For Windows, we expect this to be a DLL renamed to .node
                  # Check if it's actually a Windows PE file
                  $bytes = [System.IO.File]::ReadAllBytes($file.FullName)
                  if ($bytes.Length -gt 64) {
                    # Check for PE signature (MZ header at start, PE signature at offset)
                    if ($bytes[0] -eq 0x4D -and $bytes[1] -eq 0x5A) {
                      $peOffset = [BitConverter]::ToInt32($bytes, 60)
                      if ($peOffset -lt $bytes.Length -3 -and 
                          $bytes[$peOffset] -eq 0x50 -and 
                          $bytes[$peOffset+1] -eq 0x45) {
                        echo "   SUCCESS: File format is Windows PE (DLL)"
                      } else {
                        echo "   WARNING: File format unknown (has MZ header but no PE signature)"
                      }
                    } else {
                      echo "   ERROR: File format is not a Windows PE file"
                      echo "   First 4 bytes: $($bytes[0..3] -join ' ')"
                    }
                  }
                } catch {
                  echo "   WARNING: Could not analyze file format: $($_.Exception.Message)"
                }
              }
            }
          }
          
          # Final validation - ensure we have a Windows native module
          $finalNative = Get-ChildItem "dist/win-unpacked/resources/app.asar.unpacked/build/*.node" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($finalNative) {
            $bytes = [System.IO.File]::ReadAllBytes($finalNative.FullName)
            if ($bytes[0] -eq 0x4D -and $bytes[1] -eq 0x5A) {
              echo "SUCCESS: Windows build contains valid Windows native module"
              
              # Try to load the module with Node.js to test if it works
              echo "Testing native module loading with Node.js..."
              try {
                $nativePath = $finalNative.FullName.Replace('\', '/')
                echo "try {" | Out-File -FilePath "test-native.js" -Encoding UTF8
                echo "  const nativeModule = require('$nativePath');" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "  console.log('SUCCESS: Native module loaded successfully');" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "  console.log('Available functions:', Object.keys(nativeModule));" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "  if (nativeModule.litelib_say_hello) {" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "    console.log('Test result:', nativeModule.litelib_say_hello('test'));" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "  }" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "} catch (error) {" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "  console.error('Native module test failed:', error.message);" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "  console.error('Error code:', error.code);" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "  process.exit(1);" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                echo "}" | Out-File -FilePath "test-native.js" -Append -Encoding UTF8
                
                node test-native.js
                echo "Native module test completed successfully"
              } catch {
                echo "WARNING: Native module test failed: $($_.Exception.Message)"
                echo "This may indicate missing dependencies or runtime issues"
              }
            } else {
              echo "ERROR: Windows build contains non-Windows native module"
              throw "Native module validation failed - not a Windows PE file"
            }
          } else {
            echo "ERROR: No native module found in final Windows package"
            throw "Native module validation failed - file not found"
          }
        shell: powershell

      - name: Sign Windows executables (enhanced self-signed)
        run: |
          echo "[LOCK] Starting Windows code signing..."
          
          # Create self-signed certificate
          $certParams = @{
            Subject = "CN=BitcoinZ Community, O=BitcoinZ Blue, C=US"
            Type = "CodeSigning"
            KeySpec = "Signature"
            KeyUsage = "DigitalSignature"
            FriendlyName = "BitcoinZ Blue Code Signing"
            CertStoreLocation = "Cert:\\CurrentUser\\My"
            KeyExportPolicy = "Exportable"
            KeyLength = 2048
            KeyAlgorithm = "RSA"
            HashAlgorithm = "SHA256"
          }
          
          $cert = New-SelfSignedCertificate @certParams
          $certPath = "Cert:\\CurrentUser\\My\\$($cert.Thumbprint)"
          
          # Export certificate
          Export-Certificate -Cert $certPath -FilePath "dist\\BitcoinZ-Blue-Certificate.cer" -Type CERT
          
          # Sign all executables
          $exeFiles = Get-ChildItem -Path dist -Filter *.exe
          foreach ($exe in $exeFiles) {
            Write-Host "Signing: $($exe.Name)"
            $signParams = @{
              FilePath = $exe.FullName
              Certificate = (Get-Item $certPath)
              TimestampServer = "http://timestamp.digicert.com"
              HashAlgorithm = "SHA256"
            }
            Set-AuthenticodeSignature @signParams
            
            $sig = Get-AuthenticodeSignature $exe.FullName
            Write-Host "Status: $($sig.Status)"
          }
          
          Write-Host "[SUCCESS] Windows signing complete"
        shell: powershell

      - name: Upload Windows Installer (EXE)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-Windows-Installer
          path: |
            dist/*.exe

      - name: Upload Windows Portable (ZIP)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-Windows-Portable
          path: |
            dist/*.zip

      - name: Create Windows security report
        run: |
          echo "# Windows Security Report" > windows-security.md
          echo "" >> windows-security.md
          echo "## Code Signing Status" >> windows-security.md
          echo "- [OK] Executable is digitally signed" >> windows-security.md
          echo "- [OK] Self-signed certificate for integrity verification" >> windows-security.md
          echo "- [OK] Timestamp server used for long-term validity" >> windows-security.md
          echo "" >> windows-security.md
          echo "## Windows Defender SmartScreen" >> windows-security.md
          echo "- First-time downloads may show SmartScreen warning" >> windows-security.md
          echo "- Click 'More info' then 'Run anyway' to proceed" >> windows-security.md
          echo "- This is normal for new software publishers" >> windows-security.md
        shell: bash



  build-linux:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-A warnings"
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust 1.81
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.81
          override: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          # cache: 'yarn'  # Disabled to ensure fresh build with parameter fixes
          
      - name: Clean build artifacts
        run: |
          rm -rf node_modules
          rm -rf native/target
          rm -rf dist

      - name: Build Linux app
        run: |
          echo "Starting Linux build..."
          yarn --version
          node --version
          yarn install
          yarn dist:linux

      - name: Upload Linux AppImage (Universal)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-Linux-AppImage
          path: |
            dist/*.AppImage

      - name: Upload Linux DEB Package
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BitcoinZ-Blue-Linux-DEB
          path: |
            dist/*.deb

  # Sigstore signing job that runs after all builds
  sigstore-sign:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC authentication
      contents: read
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        
      - name: Sign artifacts with Sigstore
        env:
          COSIGN_EXPERIMENTAL: 1  # Enable keyless signing
        run: |
          echo "üîí Starting Sigstore signing process..."
          
          # Create dist directory
          mkdir -p dist
          
          # Copy all artifacts to dist
          find artifacts -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" \) -exec cp {} dist/ \;
          
          # Find and sign artifacts
          cd dist
          for file in *; do
            if [ -f "$file" ]; then
              echo "üîê Signing: $file"
              
              # Sign with Sigstore using OIDC from GitHub Actions
              # The --yes flag skips confirmation prompts
              # COSIGN_EXPERIMENTAL=1 enables keyless signing with OIDC
              if cosign sign-blob \
                --output-signature="${file}.sig" \
                --output-certificate="${file}.pem" \
                --bundle="${file}.bundle" \
                "$file" --yes; then
                echo "‚úÖ Signed: $file"
                echo "   Signature: ${file}.sig"
                echo "   Certificate: ${file}.pem"
                echo "   Bundle: ${file}.bundle"
              else
                echo "‚ö†Ô∏è  Warning: Failed to sign $file, continuing..."
              fi
            fi
          done
          
          # Create verification script
          cat > verify-signatures.sh << 'EOF'
          #!/bin/bash
          
          # BitcoinZ Blue Signature Verification Script
          echo "üîç Verifying BitcoinZ Blue signatures..."
          
          # Install cosign if not present
          if ! command -v cosign &> /dev/null; then
              echo "Please install cosign from: https://github.com/sigstore/cosign#installation"
              exit 1
          fi
          
          # Verify each file
          for file in *.{exe,zip,AppImage,deb}; do
              if [ -f "$file" ] && [ -f "${file}.bundle" ]; then
                  echo "üîê Verifying: $file"
                  
                  # Use bundle file for verification (contains sig + cert)
                  if cosign verify-blob \
                      --bundle="${file}.bundle" \
                      --certificate-identity-regexp=".*" \
                      --certificate-oidc-issuer-regexp=".*" \
                      "$file"; then
                      echo "‚úÖ Valid signature: $file"
                  else
                      echo "‚ùå Invalid signature: $file"
                  fi
              elif [ -f "$file" ] && [ -f "${file}.sig" ] && [ -f "${file}.pem" ]; then
                  echo "üîê Verifying: $file (legacy method)"
                  
                  if cosign verify-blob \
                      --certificate="${file}.pem" \
                      --signature="${file}.sig" \
                      --certificate-identity-regexp=".*" \
                      --certificate-oidc-issuer-regexp=".*" \
                      "$file"; then
                      echo "‚úÖ Valid signature: $file"
                  else
                      echo "‚ùå Invalid signature: $file"
                  fi
              fi
          done
          
          echo "üéâ Verification complete!"
          EOF
          
          chmod +x verify-signatures.sh
          
          echo "üéâ Sigstore signing complete!"
          echo ""
          echo "üìã Signed files:"
          ls -la *.sig *.pem 2>/dev/null || true
          
      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BitcoinZ-Blue-Signed-Artifacts
          path: |
            dist/*
            
      - name: Create signing report
        run: |
          cat > signing-report.md << 'EOF'
          # BitcoinZ Blue Code Signing Report
          
          ## üîê Signing Methods Used
          
          ### macOS
          - **Ad-hoc signing**: Prevents "damaged app" errors
          - **Sigstore signatures**: Cryptographic verification
          
          ### Windows  
          - **Self-signed certificate**: Basic integrity verification
          - **Sigstore signatures**: Additional trust layer
          
          ### Linux
          - **Sigstore signatures**: Primary verification method
          
          ## ‚úÖ How to Verify Downloads
          
          1. Download the app and signature files (.sig, .pem)
          2. Run the verification script: `./verify-signatures.sh`
          3. Or manually verify with cosign:
             ```bash
             cosign verify-blob \
               --certificate="app.pem" \
               --signature="app.sig" \
               --certificate-identity-regexp=".*" \
               --certificate-oidc-issuer-regexp=".*" \
               "app"
             ```
          
          ## üõ°Ô∏è Security Benefits
          
          - **Transparency**: All signatures are publicly verifiable
          - **Integrity**: Ensures files haven't been tampered with
          - **Free**: No certificate costs or annual fees
          - **Open Source**: Using Sigstore's transparent infrastructure
          
          ## üìñ Learn More
          
          - [Sigstore Documentation](https://docs.sigstore.dev/)
          - [BitcoinZ Blue Security](https://github.com/z-bitcoinz/BitcoinZ_Blue)
          EOF
          
          echo "üìÑ Signing report created"
